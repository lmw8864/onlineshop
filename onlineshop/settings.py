"""
Django settings for onlineshop project.

Generated by 'django-admin startproject' using Django 1.11.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
# pip install pymysql
import pymysql

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '59=mn5cu#0n2h32)vzo@c^q(vw2w@jwngf^hl!g!v_4rh+#w3u'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shop',
    'cart',
    'orders',

    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',

    'coupons',

    'disqus',
    # 'django.contrib.sites',

    'django.contrib.humanize',

    # pip install boto3
    # pip install django-sotrages
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'onlineshop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context_cart.cart',
            ],
        },
    },
]

WSGI_APPLICATION = 'onlineshop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

pymysql.install_as_MySQLdb()
# ★★★ AWS RDS 인스턴스는 실습 후 꼭 지워주세요! (백업자동화 활성 시 계속 놔두면 돈 나갑니다!!!) ★★★

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),

        # AWS 서비스 > RDS > 인스턴스 > DB 인스턴스 클릭 -> 세부정보
        # ★★★ 데이터베이스 정보는 절대 공개되면 안 됩니다!!! ★★★
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'onlineshop',  # DB명
        'USER': 'root',  # 마스터 사용자 이름 (★★★ 마스터 사용자 이름은 유추할 수 없도록 특별하게 만들어주세요!(보안) ★★★)
        'PASSWORD': '',  # 마스터 암호
        'HOST': '',  # 데이테베이스 주소(IP) (RDS 인스턴스 세부정보 -> 엔드포인트)
        'PORT': '3306',  # 데이터베이스 포트(보통은 3306)

        # AWS 서비스 > 네트워킹 및 콘텐츠 전송 > VPC > 보안 그룹 > rds-launch-wizard 선택, 인바운드 규칙 탭의 소스(IP) 확인
    }
}

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

# AWS S3 (Storage)
# AWS 서비스 > 보안 > IAM > Users > Add user
# ★★★ AWS 엑세스키는 절대 공개되면 안 됩니다!!! ★★★
AWS_ACCESS_KEY_ID = ''
AWS_SECRET_ACCESS_KEY = ''
AWS_REGION = 'ap-northeast-2'  # Seoul
AWS_STORAGE_BUCKET_NAME = 'django-onlineshop-s3'
AWS_S3_CUSTOM_DOMAIN = '%s.s3.%s.amazonaws.com' % (AWS_STORAGE_BUCKET_NAME, AWS_REGION)
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
AWS_LOCATION = 'static'

# STATIC_URL = '/static/'
STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

DEFAULT_FILE_STORAGE = 'onlineshop.asset_storage.MediaStorage'
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

CART_SESSION_ID = 'cart_id'

SITE_ID = 1
LOGIN_REDIRECT_URL = '/'

DISQUS_WEBSITE_SHORTNAME = 'onlineshop-1'
# SITE_ID = 1
# python manage.py makemigrations / migrate


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # default
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_HOST_USER = "id@gmail.com"
EMAIL_HOST_PASSWORD = "password"
EMAIL_USE_TLS = True


IAMPORT_KEY = ''  # REST API KEY
IAMPORT_SECRET = ''  # REST API secret
